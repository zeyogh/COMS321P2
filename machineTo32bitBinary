import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;


public class DecodeBinary{
	
	public static void main(String[] args) throws IOException {
		ArrayList<String> s = new ArrayList<String>();
		readFile("PA1.txt", s);
//		fetch f = new fetch();
//		s = f.readInput("PA1.txt");
		
		/*s.add("10010001000000000000010000000000");
		s.add("10010100000000000000000000000100");
		s.add("00010100000000000000000000000101");
		s.add("10010001000000000000010000000000");
		s.add("10110100111111111111111110000000");
		s.add("10010001000000000000010000000000");
		s.add("11010110000000000000001111000000");
		s.add("10010001000000000000010000000000");
		s.add("10010111111111111111111111111101");*/
		
		/*s.add("10001011000000110000000001000001");
		s.add("10010001000000000100000000100001");
		s.add("10010010000000000001100111000010");
		s.add("11001011000001000000000000100001");
		s.add("11111000010000000000000001000001");
		s.add("11111000000000000000000000100010");
		s.add("00010100000000000000000000000001");
		s.add("10010001000000000001010000100001");
		s.add("00010100000000000000000000000001");
		s.add("10010001000000000001010000100001");
		s.add("11101011000000010000000001000011");
		s.add("01010100000000000000000000101100");
		s.add("11101011000000010000000001000011");
		s.add("10110100000000000000000000100011");*/
		
		/*s.add("11111111100"); //tests emulator extra statements
		s.add("11111111101");
		s.add("11111111110");
		s.add("11111111111");*/
		
		ArrayList<String> file = new ArrayList<String>(); //the overall list of instructions and branches
		ArrayList<Integer> indexes = new ArrayList<Integer>(); //indexes of the instructions with the branches
		ArrayList<Integer> lines = new ArrayList<Integer>(); //lines to insert the labels at

		for (int i = 0; i < s.size(); i++) {
			if (Instruction.binarySearch(s.get(i).substring(0, 11), RFormat.getDictionary()) != -1) {
				RFormat r = new RFormat(s.get(i));
				file.add(r.toString());
			}
			else if (Instruction.binarySearch(s.get(i).substring(0, 10), IFormat.getDictionary()) != -1) {
				IFormat iff = new IFormat(s.get(i));
				file.add(iff.toString());
			}
			else if (Instruction.binarySearch(s.get(i).substring(0, 11), DFormat.getDictionary()) != -1) {
				DFormat d = new DFormat(s.get(i));
				file.add(d.toString());
			}
			else if (Instruction.binarySearch(s.get(i).substring(0, 6), BFormat.getDictionary()) != -1) {
				BFormat b = new BFormat(s.get(i));
				file.add(b.toString());
				indexes.add(file.size() - 1);
				lines.add(b.getLabelLine() + file.size() - 1);
			}
			else if (Instruction.binarySearch(s.get(i).substring(0, 8), CBFormat.getDictionary()) != -1) {
				CBFormat cb = new CBFormat(s.get(i));
				file.add(cb.toString());
				indexes.add(file.size() - 1);
				lines.add(cb.getLabelLine() + file.size() - 1);
			}

		}
		
//		for (String str : file) {
//			System.out.println(str);
//		}
		
		for (int i = 0; i < indexes.size(); i++) {
			String inst = file.get(indexes.get(i));
			String labelNum = "";
			Scanner scanInst = new Scanner(inst);
			while (scanInst.hasNext()) {
				labelNum = scanInst.next();
			}
			scanInst.close();
//			String labelNum = file.get(indexes.get(i)).charAt(file.get(indexes.get(i)).length() - 1) + "";
			boolean added = setOrAdd(lines.get(i), labelNum, file);
			if (added) {
				for (int k = i + 1; k < lines.size(); k++) {
					if (lines.get(i) < lines.get(k)) {
						lines.set(k, lines.get(k) + 1);
					}
					if (lines.get(i) < indexes.get(k)) {
						indexes.set(k, indexes.get(k) + 1);
					}
				}
			}
			else {
				Scanner scan = new Scanner(file.get(indexes.get(i)));
				String replaceLabel = "";
				while (scan.hasNext()) {
					String buffer = scan.next();
					if (scan.hasNext()) {
						replaceLabel += buffer + " ";
					}
				}
				replaceLabel += file.get(lines.get(i)).substring(0, file.get(lines.get(i)).length() - 1);
				file.set(indexes.get(i), replaceLabel);
				scan.close();
			}

			
//			for (String str : file) {
//				System.out.println(str);
//			}
//			System.out.println("----------------");
		}
		
		for (String str : file) {
			System.out.println(str);
		}
		
	}

	
	public static boolean setOrAdd(int count, String label, ArrayList<String> s) {
		if (count >= 0 && count <= s.size() - 1 && s.get(count).substring(0, 3).equals("Lab")) {
			return false;
		}
		
		if (count < 0) {
			s.add(0, label + ":");
		}
		else if (count == s.size()) {
			s.add(label + ":");
		}
		else if (count < s.size()){
			if (s.get(count) == null) {
				s.set(count, label + ":");
			}
			else {
				s.add(count, label + ":");
			}
		}
		else {
			while (s.size() < count - 1) {
				s.add(null);
			}
			s.add(label + ":");
		}
		return true;
	}
	
	public static void readFile(String filename, ArrayList<String> arr) throws FileNotFoundException {
		File file = new File(filename);
		Scanner scan = new Scanner (file);
		while (scan.hasNextLine()) {
			arr.add(scan.nextLine());
		}
		scan.close();
	}
	
}

class fetch {
	public ArrayList<String> readInput(String fileName) throws IOException{
	       FileInputStream fis = new FileInputStream(new File (fileName));
	       ArrayList<String> instructions = new ArrayList<String>();
	       int index = 0;
	       int count = 0;
	       String[] arrS = new String[4];
	       
	       while (fis.available() != 0) {
	    	   
	    	   String instLine = "";
	    	   int n = fis.read();
		       String op = String.format("%8s", Integer.toBinaryString(n).replace(' ', '0'));
		       arrS[count] = op;
		       count++;
		       
		       if(count == 4) {
			       
			       for (int i = 0; i < arrS.length; i++) {
			    	   for (int j = 0; j < 8; j++) {
			    		   if(arrS[i].charAt(j) == ' ') {
			    			   instLine += 0;
			    		   }
			    		   else {
			    			   instLine = instLine + "" + arrS[i].charAt(j);
			    		   }
			    	   }
			       } 
			       
			       instructions.add(instLine);
			       count = 0;
		       }   
	       }
	       
//	       for (int i = 0; i < instructions.size(); i++) {
//	    	   System.out.println(instructions.get(i));
//	       }
	       
	       return instructions;
	}
}
