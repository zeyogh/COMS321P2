import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;


public class DecodeBinary{
	
	public static void main(String[] args) throws IOException {
		ArrayList<String> s = new ArrayList<String>();
		fetch f = new fetch();
		s = f.readInput("C:\\Users\\jacob\\Desktop\\BinaryTest.legv8asm.machine");
		
		for (int i = 0; i < s.size(); i++) {
			RFormat rType = new RFormat(s.get(i));
			IFormat iType = new IFormat(s.get(i));
			DFormat dType = new DFormat(s.get(i));
			BFormat bType = new BFormat(s.get(i));
			CBFormat cbType = new CBFormat(s.get(i));
			
			System.out.println("---------------------");
		}
		
	}
}

class fetch {
	public ArrayList<String> readInput(String fileName) throws IOException{
	       FileInputStream fis = new FileInputStream(new File (fileName));
	       ArrayList<String> instructions = new ArrayList<String>();
	       int index = 0;
	       int count = 0;
	       String[] arrS = new String[4];
	       
	       while (fis.available() != 0) {
	    	   
	    	   String instLine = "";
	    	   int n = fis.read();
		       String op = String.format("%8s", Integer.toBinaryString(n).replace(' ', '0'));
		       arrS[count] = op;
		       count++;
		       
		       if(count == 4) {
			       
			       for (int i = 0; i < arrS.length; i++) {
			    	   for (int j = 0; j < 8; j++) {
			    		   if(arrS[i].charAt(j) == ' ') {
			    			   instLine += 0;
			    		   }
			    		   else {
			    			   instLine = instLine + "" + arrS[i].charAt(j);
			    		   }
			    	   }
			       } 
			       
			       instructions.add(instLine);
			       count = 0;
		       }   
	       }
	       
	       for (int i = 0; i < instructions.size(); i++) {
	    	   System.out.println(instructions.get(i));
	       }
	       
	       return instructions;
	}
}

abstract class Instruction {
	
	public int binarySearch(String s, String[] arr) {
		
		int l = 0;
		int r = arr.length - 1;
		
		while (l <= r) {
			int mid = (l + r) / 2;
			
			int res = s.compareTo(arr[mid]);
			
			if (res == 0) {
				return mid;
			}
			else if (res > 0) // x is on the right side
	            l = mid + 1;

	        else                  // x is on the left side
	            r = mid - 1;
			
		}
		
		return -1;
		
	}
	
}

class RFormat extends Instruction {

	private static String[] dictionary = {"10001010000", "10001011000", "10011011000", "11001010000", "11001011000", "11010011010", "11010011011", "11010110000", "11101011000"};
	private static String[] names = {"AND", "ADD", "MUL", "EOR", "SUB", "LSR", "LSL", "BR", "SUBS"};;
	
	private String opCode;
	private int Rm;
	private int shamt;
	private int Rn;
	private int Rd;
	
	public RFormat(String binary) {
		int b = binarySearch(binary.substring(0, 11),dictionary);
		if (b != -1) {
			opCode = names[b];
			Rm = Integer.parseInt(binary.substring(11, 16), 2);
			shamt = Integer.parseInt(binary.substring(16, 22), 2);
			Rn = Integer.parseInt(binary.substring(22, 27), 2);
			Rd = Integer.parseInt(binary.substring(27, 32), 2);
			System.out.println("Is an R type");
		}		
	}
}

class IFormat extends Instruction {

	private static String[] dictionary = {"1001000100", "1001001000", "1011001000", "1101000100", "1101001000", "1111000100"};
	private static String[] names = {"ADDI", "ANDI", "ORRI", "SUBI", "EORI", "SUBIS"};
	
	private String opCode;
	private int ALUImmediate;
	private int Rn;
	private int Rd;
	
	public IFormat(String binary) {
		int b = binarySearch(binary.substring(0, 10),dictionary);
		if (b != -1) {
			opCode = names[b];
			ALUImmediate = Integer.parseInt(binary.substring(10, 22), 2);
			Rn = Integer.parseInt(binary.substring(22, 27), 2);
			Rd = Integer.parseInt(binary.substring(27, 32), 2);
			System.out.println("Is I Type");
		}		
	}	
}


class DFormat extends Instruction {

	private static String[] dictionary = {"11111000000", "11111000010"};
	private static String[] names = {"STUR", "LDUR"};;
	
	private String opCode;
	private int DTAddress;
	private int op;
	private int Rn;
	private int Rd;
	
	public DFormat(String binary) {
		int b = binarySearch(binary.substring(0, 11),dictionary);
		if (b != -1) {
			opCode = names[b];
			DTAddress = Integer.parseInt(binary.substring(11, 20), 2);
			op = Integer.parseInt(binary.substring(20, 22), 2);
			Rn = Integer.parseInt(binary.substring(22, 27), 2);
			Rd = Integer.parseInt(binary.substring(27, 32), 2);
			System.out.println("Is a D Type");
		}
		
	}
	
	public String[] getDictionary() {
		return dictionary;
	}
	
}


class BFormat extends Instruction {

	private static String[] dictionary = {"000101", "100101"};
	private static String[] names = {"B", "BL"};;
	
	private String opCode;
	private int BRAddress;
	
	public BFormat(String binary) {
		int b = binarySearch(binary.substring(0, 6),dictionary);
		if (b != -1) {
			opCode = names[b];
			BRAddress = Integer.parseInt(binary.substring(6, 32), 2);
			System.out.println("Is B Type");
		}
		
	}
	
	public String[] getDictionary() {
		return dictionary;
	}
	
}

